David Miller | djm545

Q2.1)
// Purpose: Takes an array of integers , along with n, the number of elements in the array (as a size_t), and an int to
// 			search for (target), and returns the index of the target element if found, n otherwise.
// Preconditions: Array of ints, size of array n, target int within the array.
// Postconditions: Index of target if found, otherwise the size of the array n.

size_t binSearch(int* ints, size_t n, int target) {
	size_t lowerBound = 0;	
	size_t upperBound = n - 1;
	size_t currentMid = n / 2 - 1;
	while (upperBound != 0 && lowerBound <= upperBound) {
		
		if ( *(ints+currentMid) == target ) {
			return currentMid;
		}
		else if ( *(ints+currentMid) < target ) {	
			lowerBound = currentMid + 1;
			currentMid = (upperBound - lowerBound) / 2 + lowerBound;
		}
		else if ( *(ints+currentMid) > target) {
			upperBound = currentMid - 1;	
			currentMid = upperBound - (upperBound - lowerBound) / 2;
		}
	}

	return (*(ints+currentMid) == target) ? currentMid : n;
}		

Q2.2)
// Purpose: Takes an array of doubles , along with the array's length (as a size_t), and computes the arithmetic mean,
// 			max, and min, as doubles.
// Preconditions: An array of doubles and the length of the array
// Postconditions: Modifies the values of pointers min, max, and mean

void arrStats(double* doubles, size_t len, double* min, double* max, double* mean)
{	
	for (size_t i = 0; i < len; i++) {
		*mean += doubles[i];
		if (i == 0) {
			*min = *(doubles+i);
			*max = *(doubles+i);
		}
		*min = (*min > *(doubles+i)) ? *(doubles+i) : *min;
		*max = (*(doubles+i) > *max) ? *(doubles+i) : *max;
	}
	*mean /= len;	
}

Q2.3)
// Purpose: Find a target value in a given array and return a pointer value to that target.
// Preconditions: An array of ints, the array length, and a target value within the integer
// Postconditions: A pointer to either the target if found, or NULL if not.

int* arrFind(int* ints, size_t len, int target) {
	for (size_t i = 0; i < len; i++) {
		if (*(ints+i) == target) {
			return ints+i;
		}
	}
	return NULL;
}

Q3.1)
// Purpose: Takes a null-terminated string (char*), and replaces each lower-case letter with its upper-case counterpart.
// Preconditions: A string
// Postconditions: A capitalized string

void capitalise(char* string) {	
	for (size_t i = 0; *(string+i) != '\0'; ++i) {
		if (islower(*(string+i))) {	
			*(string+i) = toupper(*(string+i));	
		}	
	}
}
